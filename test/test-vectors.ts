import fs from 'fs'
import path from 'path'

import type { SnarkjsProof } from 'snarkjs'

import type { CircuitInputs, Proof, ProverArtifacts } from '../src'
import type { PublicInputs, SnarkJSCircuitInputFormat } from '../src/types'

import vkey1x2 from './test-artifacts/1x2_vkey.json'
import vkey2x2 from './test-artifacts/2x2_vkey.json'

const zkey1x2 = fs.readFileSync(path.resolve(__dirname, './test-artifacts/1x2_zkey'))
const zkey2x2 = fs.readFileSync(path.resolve(__dirname, './test-artifacts/2x2_zkey'))
const wasm1x2 = fs.readFileSync(path.resolve(__dirname, './test-artifacts/1x2.wasm'))
const wasm2x2 = fs.readFileSync(path.resolve(__dirname, './test-artifacts/2x2.wasm'))

// Typecast artifacts since we only use groth16 bn128
const artifacts1x2 = {
  vkey: vkey1x2,
  zkey: zkey1x2,
  wasm: wasm1x2
} as ProverArtifacts

// Typecast artifacts since we only use groth16 bn128
const artifacts2x2 = {
  vkey: vkey2x2,
  zkey: zkey2x2,
  wasm: wasm2x2
} as ProverArtifacts

interface TestVector {
  proof?: Proof; // Optional as it must be generated by prove() first
  inputs: CircuitInputs;
  artifacts: ProverArtifacts;
}

// Generated by ../src/formatter.ts/standardToSnarkJSProof() using a Proof returned from prove()
export const snarkJsProofs: SnarkjsProof[] = [
  {
    pi_a: [
      '945393213072472425648593815623030814902133402452915878780166940709184328936',
      '19214925514709896878591178959460515472405231989245356704626750799778458123694'
    ],
    pi_b: [
      ['18100980054367628012443725172538683381334691409492943787580230920074795683321', '10880803710486151488700781919176854938818974839420518448054597429685969191064'],
      ['18954450571087549069951338880045840038790692299497922521148550035418018122997', '1666951516444070544176780331165625140965246338725473189836163455734077851985']
    ],
    pi_c: [
      '6867214772114174848754751349683395088933799224243873264729162161857188335484',
      '20696602787399192301184771784352698171912194710118052528150995891752710297055'
    ],
    protocol: 'groth16'
  },
  {
    pi_a: [
      '3545748088575073871954240704592314771181632288321184464801769994027657971863',
      '2788245893529375078890099619995678891737643469614795186618884297933012089993'
    ],
    pi_b: [
      ['10868078109836173570028942301612542927452378672253667639728624166774301368551', '18586213405606826584512822076330488910563935633751684592267901018241743572540'],
      ['4530259384673216893365379692336050676575360898326246878146981576132427977978', '3029597041409598148420539266670537018377704589841963130664372065249684813543']
    ],
    pi_c: [
      '12355172186140849370098730054031476473058096360296318324012087117168078305850',
      '12387091698599055636753483495537491717288782536110233272189937634431016222272'
    ],
    protocol: 'groth16'
  }
]

// Generated by ../src/formatter.ts/snarkJSToStandardProof() using a SnarkjsProof input logged by prove()
export const standardProofs: Proof[] = [
  {
    a:
    {
      x: new Uint8Array([2, 23, 18, 215, 53, 28, 118, 244, 46, 219, 218, 223, 180, 255, 20, 64, 123, 116, 178, 255, 12, 237, 22, 76, 60, 217, 27, 254, 229, 235, 212, 232]),
      y: new Uint8Array([42, 123, 67, 47, 10, 168, 3, 6, 161, 15, 104, 213, 120, 160, 174, 241, 71, 5, 199, 145, 209, 26, 101, 79, 243, 114, 76, 236, 98, 248, 61, 174])
    },
    b: {
      x: [
        new Uint8Array([24, 14, 81, 16, 121, 60, 95, 248, 39, 29, 239, 22, 55, 5, 120, 252, 58, 249, 143, 231, 172, 30, 7, 73, 37, 195, 20, 241, 95, 143, 128, 152]),
        new Uint8Array([40, 4, 202, 169, 130, 229, 10, 219, 39, 85, 63, 224, 132, 18, 133, 168, 103, 143, 6, 253, 188, 31, 156, 184, 111, 142, 133, 232, 121, 36, 13, 249]),
      ],
      y: [
        new Uint8Array([3, 175, 118, 12, 45, 74, 172, 235, 48, 105, 230, 167, 127, 63, 126, 250, 22, 250, 25, 211, 160, 135, 140, 137, 68, 109, 183, 163, 197, 230, 9, 81]),
        new Uint8Array([41, 231, 214, 190, 105, 106, 214, 7, 105, 166, 113, 1, 68, 209, 148, 117, 180, 5, 23, 5, 108, 7, 158, 153, 26, 195, 85, 240, 68, 74, 140, 245]),
      ]
    },
    c: {
      x: new Uint8Array([15, 46, 180, 176, 181, 74, 230, 223, 87, 34, 174, 23, 104, 155, 157, 193, 93, 33, 129, 82, 244, 113, 165, 4, 147, 202, 149, 167, 23, 152, 15, 124]),
      y: new Uint8Array([45, 193, 220, 175, 146, 212, 130, 118, 227, 242, 197, 216, 179, 81, 95, 10, 213, 104, 55, 122, 97, 158, 112, 198, 176, 246, 61, 190, 45, 161, 213, 223])
    }
  }, {
    a: {
      x: new Uint8Array([7, 214, 210, 130, 48, 118, 130, 138, 249, 90, 40, 90, 223, 246, 17, 251, 101, 100, 182, 66, 169, 36, 7, 43, 215, 13, 81, 113, 243, 157, 200, 151]),
      y: new Uint8Array([6, 42, 23, 92, 45, 216, 65, 35, 168, 109, 106, 106, 94, 215, 166, 35, 121, 219, 9, 140, 184, 146, 121, 207, 114, 226, 44, 155, 111, 116, 60, 137])
    },
    b: {
      x: [
        new Uint8Array([41, 23, 108, 138, 210, 22, 172, 72, 130, 41, 133, 142, 141, 45, 63, 82, 24, 60, 146, 1, 164, 95, 205, 83, 180, 138, 40, 200, 150, 145, 206, 60]),
        new Uint8Array([24, 7, 29, 61, 182, 40, 146, 190, 55, 210, 252, 240, 236, 247, 255, 153, 166, 111, 212, 89, 198, 23, 0, 142, 61, 22, 180, 234, 71, 149, 160, 231])
      ],
      y: [
        new Uint8Array([6, 178, 176, 239, 205, 14, 236, 83, 118, 95, 215, 27, 173, 68, 167, 226, 129, 233, 105, 175, 133, 237, 171, 77, 172, 63, 56, 212, 212, 90, 246, 231]),
        new Uint8Array([10, 4, 9, 51, 189, 7, 84, 94, 56, 84, 68, 91, 101, 5, 95, 243, 75, 1, 194, 64, 46, 25, 128, 83, 241, 167, 119, 254, 91, 39, 20, 250])
      ],
    },
    c: {
      x: new Uint8Array([27, 80, 199, 150, 168, 7, 18, 188, 187, 47, 199, 2, 76, 217, 227, 53, 215, 93, 191, 44, 90, 234, 210, 41, 159, 95, 182, 88, 42, 85, 58, 58]),
      y: new Uint8Array([27, 98, 216, 111, 44, 252, 116, 102, 214, 239, 120, 253, 208, 133, 144, 87, 84, 113, 130, 0, 100, 244, 10, 195, 44, 143, 166, 96, 109, 185, 190, 64])
    }
  }
]

// Generated by ../src/formatter.ts/standardToSnarkJSPublicInputs() using a PublicInputs returned from prove()
export const snarkJsCircuitInputs: SnarkJSCircuitInputFormat[] = [
  {
    merkleRoot: '0x14a4f4001199b05fa5e3bd4ca9bd191084c891feac99be79272cdd671d5275b8',
    boundParamsHash: '0x1d64d5e8131bfc3fc3d10343fd3daf7798ae637302501b9058085eb0c2fd2fa1',
    nullifiers: [
      '0x0bee1c05c9921260085974c1b47e1b0ca39d5b3dfd40cc217a97e43c8595e299'
    ],
    commitmentsOut: [
      '0x20a3de4307607d219d43d4ecb6f732c5f41d5d2ea1773325d44eba6833db88a8',
      '0x1acf333c90ef6d2845cf61c8bef557ad7a78885ad6f8cc84b8d8cc6d5c8c1191'
    ],
    token: '0x0000000000000000000000000000000000000000000000000000000000000000',
    publicKey: [
      '0x0ab643966862eed77019d5d727dfd33503f760280079a02ecbff2728e359c832',
      '0x07151d539ec1fa7269b5521e3bc6a807b1228986434b289434333745888a1b3b'
    ],
    signature: [
      '0x059aa001a731044b2e8616835a3ac2bd546e4ae01d65c5310ae2ab2d8035c917',
      '0x0690127598e397fc02e84c39344b35504c3159614cd11682bd96d50a08740e93',
      '0x0342eb28a3c786f8d29384b8e5231623fdb0a46aed370f8536165dde2770dd7c'
    ],
    randomIn: [
      '0x000000000000000000000000000000003df8b0f35478acf7bca5a9501776b86a'
    ],
    valueIn: ['2'],
    pathElements: [
      [
        '0x0488f89b25bc7011eaf6a5edce71aeafb9fe706faa3c0a5cd9cbe868ae3b9ffc',
        '0x01c405064436affeae1fc8e30b2e417b4243bbb819adca3b55bb32efc3e43a4f',
        '0x0888d37652d10d1781db54b70af87b42a2916e87118f507218f9a42a58e85ed2',
        '0x183f531ead7217ebc316b4c02a2aad5ad87a1d56d4fb9ed81bf84f644549eaf5',
        '0x093c48f1ecedf2baec231f0af848a57a76c6cf05b290a396707972e1defd17df',
        '0x1437bb465994e0453357c17a676b9fdba554e215795ebc17ea5012770dfb77c7',
        '0x12359ef9572912b49f44556b8bbbfa69318955352f54cfa35cb0f41309ed445a',
        '0x2dc656dadc82cf7a4707786f4d682b0f130b6515f7927bde48214d37ec25a46c',
        '0x2500bdfc1592791583acefd050bc439a87f1d8e8697eb773e8e69b44973e6fdc',
        '0x244ae3b19397e842778b254cd15c037ed49190141b288ff10eb1390b34dc2c31',
        '0x0ca2b107491c8ca6e5f7e22403ea8529c1e349a1057b8713e09ca9f5b9294d46',
        '0x18593c75a9e42af27b5e5b56b99c4c6a5d7e7d6e362f00c8e3f69aeebce52313',
        '0x17aca915b237b04f873518947a1f440f0c1477a6ac79299b3be46858137d4bfb',
        '0x2726c22ad3d9e23414887e8233ee83cc51603f58c48a9c9e33cb1f306d4365c0',
        '0x08c5bd0f85cef2f8c3c1412a2b69ee943c6925ecf79798bb2b84e1b76d26871f',
        '0x27f7c465045e0a4d8bec7c13e41d793734c50006ca08920732ce8c3096261435'
      ]
    ],
    leavesIndices: [0],
    nullifyingKey: '0x10723748ec5f3c372795b09ff836a01c2d8912dbdf326e675bd2cce508f85249',
    npkOut: [
      '0x2f7932a1cdf8f59676f69477a095b0eccf0863f7def1d7d9d0de0c3cb2db2f7a',
      '0x10501d009bb1adc975a4f9de0ea9f2827cf033a51c807db6906debcc78eb5b5b'
    ],
    valueOut: ['1', '1']
  },
  {
    merkleRoot: '0x1148d2b3e740c0518dd13e34d37cf333424629321fa01b80519b50d1b0df53da',
    boundParamsHash: '0x10c9776c6464fc82f6ecb6ef4a203a4cbb540231e7e210d2f6768a84131be256',
    nullifiers: [
      '0x0cb00ae89c6dcfbc01de384c93348a6313b1209c2ce85dff03b3e5ac282938eb',
      '0x1610a7d06554d1e274789a051fd9af036dd85095eee22dcb08d6b5630dcb86e1'
    ],
    commitmentsOut: [
      '0x172e2881fe6c0a6efbdf3cb69a1b4813f79471cf9db112deea084f1a4ef94bd5',
      '0x17387dddf80919ed14456d71f72d9a69bb712d62b5b140560c2ca09b845bb013'
    ],
    token: '0x0000000000000000000000000000000000000000000000000000000000000000',
    publicKey: [
      '0x080f578be453513415d4a378d5bb788b0032a2302827ade8e67b47c2a8a5305f',
      '0x2b7fe941f0a28e383cfc43ab425d542dda68be4573e7d74e343f2361c9b1de9b'
    ],
    signature: [
      '0x2f956354a049ff75687ccb33448c1f909fc346aeb6b49aaf9aa8317d5d0f39be',
      '0x0556da858d623735bc12cdec6c92916183586d7587e66ee1cab7fe86caae7063',
      '0x04ea2410abab266c0ce7c23b706b2832312aa02ed01a4f6e14d0effd740a16c6'
    ],
    randomIn: [
      '0x000000000000000000000000000000001eb096daaf86af3f87812369b0f6b4da',
      '0x000000000000000000000000000000008c6a44c9b5e4a5c8386251f1d84afdd3'
    ],
    valueIn: ['2', '2'],
    pathElements: [
      [
        '0x1215152cb4bee33b557e355770a1724881f3e39660613d0cba1071ec3bb3627d',
        '0x01c405064436affeae1fc8e30b2e417b4243bbb819adca3b55bb32efc3e43a4f',
        '0x0888d37652d10d1781db54b70af87b42a2916e87118f507218f9a42a58e85ed2',
        '0x183f531ead7217ebc316b4c02a2aad5ad87a1d56d4fb9ed81bf84f644549eaf5',
        '0x093c48f1ecedf2baec231f0af848a57a76c6cf05b290a396707972e1defd17df',
        '0x1437bb465994e0453357c17a676b9fdba554e215795ebc17ea5012770dfb77c7',
        '0x12359ef9572912b49f44556b8bbbfa69318955352f54cfa35cb0f41309ed445a',
        '0x2dc656dadc82cf7a4707786f4d682b0f130b6515f7927bde48214d37ec25a46c',
        '0x2500bdfc1592791583acefd050bc439a87f1d8e8697eb773e8e69b44973e6fdc',
        '0x244ae3b19397e842778b254cd15c037ed49190141b288ff10eb1390b34dc2c31',
        '0x0ca2b107491c8ca6e5f7e22403ea8529c1e349a1057b8713e09ca9f5b9294d46',
        '0x18593c75a9e42af27b5e5b56b99c4c6a5d7e7d6e362f00c8e3f69aeebce52313',
        '0x17aca915b237b04f873518947a1f440f0c1477a6ac79299b3be46858137d4bfb',
        '0x2726c22ad3d9e23414887e8233ee83cc51603f58c48a9c9e33cb1f306d4365c0',
        '0x08c5bd0f85cef2f8c3c1412a2b69ee943c6925ecf79798bb2b84e1b76d26871f',
        '0x27f7c465045e0a4d8bec7c13e41d793734c50006ca08920732ce8c3096261435'
      ],
      [
        '0x0f4d8070b94028513c952d42fc9c8d51f8a0ca8e127c5ea2cbf82987ca830dd0',
        '0x01c405064436affeae1fc8e30b2e417b4243bbb819adca3b55bb32efc3e43a4f',
        '0x0888d37652d10d1781db54b70af87b42a2916e87118f507218f9a42a58e85ed2',
        '0x183f531ead7217ebc316b4c02a2aad5ad87a1d56d4fb9ed81bf84f644549eaf5',
        '0x093c48f1ecedf2baec231f0af848a57a76c6cf05b290a396707972e1defd17df',
        '0x1437bb465994e0453357c17a676b9fdba554e215795ebc17ea5012770dfb77c7',
        '0x12359ef9572912b49f44556b8bbbfa69318955352f54cfa35cb0f41309ed445a',
        '0x2dc656dadc82cf7a4707786f4d682b0f130b6515f7927bde48214d37ec25a46c',
        '0x2500bdfc1592791583acefd050bc439a87f1d8e8697eb773e8e69b44973e6fdc',
        '0x244ae3b19397e842778b254cd15c037ed49190141b288ff10eb1390b34dc2c31',
        '0x0ca2b107491c8ca6e5f7e22403ea8529c1e349a1057b8713e09ca9f5b9294d46',
        '0x18593c75a9e42af27b5e5b56b99c4c6a5d7e7d6e362f00c8e3f69aeebce52313',
        '0x17aca915b237b04f873518947a1f440f0c1477a6ac79299b3be46858137d4bfb',
        '0x2726c22ad3d9e23414887e8233ee83cc51603f58c48a9c9e33cb1f306d4365c0',
        '0x08c5bd0f85cef2f8c3c1412a2b69ee943c6925ecf79798bb2b84e1b76d26871f',
        '0x27f7c465045e0a4d8bec7c13e41d793734c50006ca08920732ce8c3096261435'
      ]
    ],
    leavesIndices: [0, 1],
    nullifyingKey: '0x2cc5f0087c10d9ca4de9c258bd54c5e5d4de3618cdf11c7daaa0f9bad1a57cb3',
    npkOut: [
      '0x1a3587a6901fef437c8257907ff469f8105e532b7844057ef177ac4a38e0a328',
      '0x2904944d9042b2eabdd1a0848524b4a5b7c576a94f5109caca36422d4b0659ab'
    ],
    valueOut: ['2', '2']
  }
]

// Generated by ../src/formatter.ts/snarkJSToStandardPublicInputs() using a SnarkJSCircuitInputFormat input logged from prove()
export const standardPublicInputs: PublicInputs[] = [
  {
    proof: {
      a: {
        x: new Uint8Array([6, 101, 226, 56, 201, 25, 151, 11, 146, 24, 243, 169, 164, 180, 70, 40, 120, 73, 102, 65, 199, 102, 28, 117, 3, 143, 115, 65, 127, 168, 51, 20]),
        y: new Uint8Array([21, 151, 229, 238, 240, 170, 172, 156, 239, 105, 189, 202, 232, 238, 140, 222, 152, 226, 200, 73, 230, 102, 202, 200, 154, 127, 204, 90, 119, 242, 127, 142])
      },
      b: {
        x: [
          new Uint8Array([45, 19, 210, 107, 35, 239, 113, 231, 91, 195, 185, 31, 252, 87, 118, 91, 208, 58, 235, 143, 85, 127, 242, 81, 116, 173, 74, 18, 43, 63, 72, 6]),
          new Uint8Array([41, 75, 166, 4, 199, 174, 89, 212, 241, 180, 120, 131, 188, 110, 186, 18, 70, 215, 175, 48, 245, 207, 0, 211, 197, 188, 217, 134, 233, 116, 112, 64])],
        y: [
          new Uint8Array([34, 137, 148, 115, 64, 84, 231, 126, 39, 40, 171, 173, 45, 246, 206, 48, 26, 122, 215, 18, 122, 9, 53, 17, 94, 7, 240, 92, 63, 65, 65, 131]),
          new Uint8Array([3, 49, 240, 252, 145, 26, 140, 54, 247, 47, 41, 95, 157, 214, 61, 213, 36, 17, 244, 188, 207, 30, 200, 151, 165, 162, 74, 219, 139, 27, 77, 145])
        ]
      },
      c: {
        x: new Uint8Array([38, 59, 60, 91, 220, 247, 80, 136, 187, 209, 192, 56, 241, 50, 20, 126, 181, 15, 21, 84, 115, 214, 179, 226, 108, 83, 228, 201, 201, 157, 50, 115]),
        y: new Uint8Array([30, 100, 90, 115, 99, 205, 28, 162, 102, 159, 91, 79, 169, 179, 30, 48, 23, 10, 21, 255, 172, 23, 2, 117, 157, 228, 249, 165, 160, 6, 171, 96])
      }
    },
    merkleRoot: new Uint8Array([
      20, 164, 244, 0, 17, 153, 176, 95,
      165, 227, 189, 76, 169, 189, 25, 16,
      132, 200, 145, 254, 172, 153, 190, 121,
      39, 44, 221, 103, 29, 82, 117, 184
    ]),
    nullifiers: [
      new Uint8Array([
        11, 238, 28, 5, 201, 146, 18, 96,
        8, 89, 116, 193, 180, 126, 27, 12,
        163, 157, 91, 61, 253, 64, 204, 33,
        122, 151, 228, 60, 133, 149, 226, 153
      ]),
    ],
    commitments: [
      new Uint8Array([
        32, 163, 222, 67, 7, 96, 125, 33,
        157, 67, 212, 236, 182, 247, 50, 197,
        244, 29, 93, 46, 161, 119, 51, 37,
        212, 78, 186, 104, 51, 219, 136, 168
      ]),
      new Uint8Array([
        26, 207, 51, 60, 144, 239, 109,
        40, 69, 207, 97, 200, 190, 245,
        87, 173, 122, 120, 136, 90, 214,
        248, 204, 132, 184, 216, 204, 109,
        92, 140, 17, 145
      ])
    ],
    boundParams: new Uint8Array([
      29, 100, 213, 232, 19, 27, 252, 63,
      195, 209, 3, 67, 253, 61, 175, 119,
      152, 174, 99, 115, 2, 80, 27, 144,
      88, 8, 94, 176, 194, 253, 47, 161
    ])
  },
  {
    proof: {
      a: {
        x: new Uint8Array([2, 53, 22, 3, 87, 232, 8, 153, 215, 76, 35, 36, 15, 130, 27, 29, 202, 63, 220, 159, 164, 22, 117, 82, 177, 128, 167, 74, 203, 2, 33, 53]),
        y: new Uint8Array([8, 6, 14, 204, 59, 58, 139, 100, 219, 226, 89, 63, 127, 90, 135, 232, 22, 125, 111, 67, 182, 56, 110, 5, 190, 236, 152, 158, 135, 227, 165, 253])
      },
      b: {
        x: [
          new Uint8Array([35, 222, 132, 190, 111, 36, 45, 0, 204, 45, 55, 216, 117, 128, 36, 82, 14, 252, 116, 125, 131, 247, 64, 255, 85, 243, 67, 250, 36, 57, 25, 134]),
          new Uint8Array([25, 141, 109, 161, 191, 1, 230, 181, 120, 28, 64, 233, 61, 14, 120, 33, 203, 50, 1, 227, 180, 37, 0, 198, 26, 10, 74, 43, 63, 95, 36, 91])
        ],
        y: [
          new Uint8Array([37, 124, 198, 52, 89, 247, 60, 154, 169, 91, 40, 193, 139, 42, 66, 140, 75, 214, 157, 66, 35, 128, 65, 92, 38, 168, 132, 2, 118, 117, 213, 186]),
          new Uint8Array([9, 178, 111, 156, 103, 238, 120, 87, 149, 249, 154, 145, 120, 241, 235, 141, 51, 29, 114, 128, 213, 45, 63, 50, 233, 158, 132, 154, 52, 63, 166, 93])
        ]
      },
      c: {
        x: new Uint8Array([15, 115, 242, 188, 167, 32, 252, 255, 127, 7, 25, 76, 193, 247, 112, 139, 125, 90, 230, 172, 59, 190, 125, 188, 188, 173, 68, 246, 109, 1, 78, 219]),
        y: new Uint8Array([19, 0, 45, 3, 191, 97, 2, 206, 10, 40, 80, 113, 127, 185, 178, 62, 6, 8, 106, 61, 159, 169, 234, 203, 150, 42, 209, 176, 137, 138, 42, 93])
      }
    },
    merkleRoot: new Uint8Array([
      17, 72, 210, 179, 231, 64, 192, 81,
      141, 209, 62, 52, 211, 124, 243, 51,
      66, 70, 41, 50, 31, 160, 27, 128,
      81, 155, 80, 209, 176, 223, 83, 218
    ]),
    nullifiers: [
      new Uint8Array([
        12, 176, 10, 232, 156, 109, 207, 188,
        1, 222, 56, 76, 147, 52, 138, 99,
        19, 177, 32, 156, 44, 232, 93, 255,
        3, 179, 229, 172, 40, 41, 56, 235
      ]),
      new Uint8Array([
        22, 16, 167, 208, 101, 84, 209, 226,
        116, 120, 154, 5, 31, 217, 175, 3,
        109, 216, 80, 149, 238, 226, 45, 203,
        8, 214, 181, 99, 13, 203, 134, 225
      ])
    ],
    commitments: [
      new Uint8Array([
        23, 46, 40, 129, 254, 108, 10, 110,
        251, 223, 60, 182, 154, 27, 72, 19,
        247, 148, 113, 207, 157, 177, 18, 222,
        234, 8, 79, 26, 78, 249, 75, 213
      ]),
      new Uint8Array([
        23, 56, 125, 221, 248, 9, 25, 237,
        20, 69, 109, 113, 247, 45, 154, 105,
        187, 113, 45, 98, 181, 177, 64, 86,
        12, 44, 160, 155, 132, 91, 176, 19
      ])
    ],
    boundParams: new Uint8Array([
      16, 201, 119, 108, 100, 100, 252, 130,
      246, 236, 182, 239, 74, 32, 58, 76,
      187, 84, 2, 49, 231, 226, 16, 210,
      246, 118, 138, 132, 19, 27, 226, 86
    ])
  }
]

// Generated by ../src/formatter.ts/extractPublicInputsFromCircuitInputs() using a CircuitInputs input from contract test output (see README)
export const snarkJsPublicInputs: string[][] = [
  [
    '9337703918251132624253342157066541927765614436007056645327129240427092407736',
    '13295233644084502910930359176594948750552096129335803265477930686842410971041',
    '5396144340758490283500147139064354415260209431423438351558551960166631596697',
    '14763541221005694507233752058948859317689181870939661084778039771333884872872',
    '12126225027498002308336526514669810116731084887395334972821387226410866446737'
  ],
  [
    '7817985631496628204817331841116502420892384018908856979162101345962491335642',
    '7592966067414998144832934809423446367874689503904923357572574531135695741526',
    '5738794555045178302870873214211437294262638628036635575894916335097615038699',
    '9980310431848569810732169755030033615719951363603951806800386205687179085537',
    '10484750056875691769630033702791386776339762224157448934234050914917608410069',
    '10503007655605471096485365494787355027425580904933253866259219948240566464531'
  ]
]

/**
 * Test vectors for calling prove() and verify()
 *
 * @property artifacts - The artifacts object from the compiled circuit, available on IPFS (see README)
 * @property inputs - The inputs object for the circuit, logged from a contract test output (see README)
 * @property proof - The Proof object logged from the output of prove(), or reformatted from a contract test output (see README)
 */
export const testVectors: TestVector[] = [
  {
    artifacts: artifacts1x2,
    inputs:
      {
        merkleRoot: new Uint8Array([20, 164, 244, 0, 17, 153, 176, 95, 165, 227, 189, 76, 169, 189, 25, 16, 132, 200, 145, 254, 172, 153, 190, 121, 39, 44, 221, 103, 29, 82, 117, 184]),
        boundParamsHash: new Uint8Array([29, 100, 213, 232, 19, 27, 252, 63, 195, 209, 3, 67, 253, 61, 175, 119, 152, 174, 99, 115, 2, 80, 27, 144, 88, 8, 94, 176, 194, 253, 47, 161]),
        token: new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
        publicKey: ([new Uint8Array([10, 182, 67, 150, 104, 98, 238, 215, 112, 25, 213, 215, 39, 223, 211, 53, 3, 247, 96, 40, 0, 121, 160, 46, 203, 255, 39, 40, 227, 89, 200, 50]), new Uint8Array([7, 21, 29, 83, 158, 193, 250, 114, 105, 181, 82, 30, 59, 198, 168, 7, 177, 34, 137, 134, 67, 75, 40, 148, 52, 51, 55, 69, 136, 138, 27, 59])]),
        signature: [
          new Uint8Array([5, 154, 160, 1, 167, 49, 4, 75, 46, 134, 22, 131, 90, 58, 194, 189, 84, 110, 74, 224, 29, 101, 197, 49, 10, 226, 171, 45, 128, 53, 201, 23]),
          new Uint8Array([6, 144, 18, 117, 152, 227, 151, 252, 2, 232, 76, 57, 52, 75, 53, 80, 76, 49, 89, 97, 76, 209, 22, 130, 189, 150, 213, 10, 8, 116, 14, 147]),
          new Uint8Array([3, 66, 235, 40, 163, 199, 134, 248, 210, 147, 132, 184, 229, 35, 22, 35, 253, 176, 164, 106, 237, 55, 15, 133, 54, 22, 93, 222, 39, 112, 221, 124])
        ],
        nullifyingKey: new Uint8Array([16, 114, 55, 72, 236, 95, 60, 55, 39, 149, 176, 159, 248, 54, 160, 28, 45, 137, 18, 219, 223, 50, 110, 103, 91, 210, 204, 229, 8, 248, 82, 73]),
        inputTXOs: [{
          nullifier: new Uint8Array([11, 238, 28, 5, 201, 146, 18, 96, 8, 89, 116, 193, 180, 126, 27, 12, 163, 157, 91, 61, 253, 64, 204, 33, 122, 151, 228, 60, 133, 149, 226, 153]),
          randomIn: new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61, 248, 176, 243, 84, 120, 172, 247, 188, 165, 169, 80, 23, 118, 184, 106]),
          valueIn: 2n,
          merkleleafPosition: 0,
          pathElements: [
            new Uint8Array([4, 136, 248, 155, 37, 188, 112, 17, 234, 246, 165, 237, 206, 113, 174, 175, 185, 254, 112, 111, 170, 60, 10, 92, 217, 203, 232, 104, 174, 59, 159, 252]),
            new Uint8Array([1, 196, 5, 6, 68, 54, 175, 254, 174, 31, 200, 227, 11, 46, 65, 123, 66, 67, 187, 184, 25, 173, 202, 59, 85, 187, 50, 239, 195, 228, 58, 79]),
            new Uint8Array([8, 136, 211, 118, 82, 209, 13, 23, 129, 219, 84, 183, 10, 248, 123, 66, 162, 145, 110, 135, 17, 143, 80, 114, 24, 249, 164, 42, 88, 232, 94, 210]),
            new Uint8Array([24, 63, 83, 30, 173, 114, 23, 235, 195, 22, 180, 192, 42, 42, 173, 90, 216, 122, 29, 86, 212, 251, 158, 216, 27, 248, 79, 100, 69, 73, 234, 245]),
            new Uint8Array([9, 60, 72, 241, 236, 237, 242, 186, 236, 35, 31, 10, 248, 72, 165, 122, 118, 198, 207, 5, 178, 144, 163, 150, 112, 121, 114, 225, 222, 253, 23, 223]),
            new Uint8Array([20, 55, 187, 70, 89, 148, 224, 69, 51, 87, 193, 122, 103, 107, 159, 219, 165, 84, 226, 21, 121, 94, 188, 23, 234, 80, 18, 119, 13, 251, 119, 199]),
            new Uint8Array([18, 53, 158, 249, 87, 41, 18, 180, 159, 68, 85, 107, 139, 187, 250, 105, 49, 137, 85, 53, 47, 84, 207, 163, 92, 176, 244, 19, 9, 237, 68, 90]),
            new Uint8Array([45, 198, 86, 218, 220, 130, 207, 122, 71, 7, 120, 111, 77, 104, 43, 15, 19, 11, 101, 21, 247, 146, 123, 222, 72, 33, 77, 55, 236, 37, 164, 108]),
            new Uint8Array([37, 0, 189, 252, 21, 146, 121, 21, 131, 172, 239, 208, 80, 188, 67, 154, 135, 241, 216, 232, 105, 126, 183, 115, 232, 230, 155, 68, 151, 62, 111, 220]),
            new Uint8Array([36, 74, 227, 177, 147, 151, 232, 66, 119, 139, 37, 76, 209, 92, 3, 126, 212, 145, 144, 20, 27, 40, 143, 241, 14, 177, 57, 11, 52, 220, 44, 49]),
            new Uint8Array([12, 162, 177, 7, 73, 28, 140, 166, 229, 247, 226, 36, 3, 234, 133, 41, 193, 227, 73, 161, 5, 123, 135, 19, 224, 156, 169, 245, 185, 41, 77, 70]),
            new Uint8Array([24, 89, 60, 117, 169, 228, 42, 242, 123, 94, 91, 86, 185, 156, 76, 106, 93, 126, 125, 110, 54, 47, 0, 200, 227, 246, 154, 238, 188, 229, 35, 19]),
            new Uint8Array([23, 172, 169, 21, 178, 55, 176, 79, 135, 53, 24, 148, 122, 31, 68, 15, 12, 20, 119, 166, 172, 121, 41, 155, 59, 228, 104, 88, 19, 125, 75, 251]),
            new Uint8Array([39, 38, 194, 42, 211, 217, 226, 52, 20, 136, 126, 130, 51, 238, 131, 204, 81, 96, 63, 88, 196, 138, 156, 158, 51, 203, 31, 48, 109, 67, 101, 192]),
            new Uint8Array([8, 197, 189, 15, 133, 206, 242, 248, 195, 193, 65, 42, 43, 105, 238, 148, 60, 105, 37, 236, 247, 151, 152, 187, 43, 132, 225, 183, 109, 38, 135, 31]),
            new Uint8Array([39, 247, 196, 101, 4, 94, 10, 77, 139, 236, 124, 19, 228, 29, 121, 55, 52, 197, 0, 6, 202, 8, 146, 7, 50, 206, 140, 48, 150, 38, 20, 53])],
        }],
        outputTXOs: [{
          commitment: new Uint8Array([32, 163, 222, 67, 7, 96, 125, 33, 157, 67, 212, 236, 182, 247, 50, 197, 244, 29, 93, 46, 161, 119, 51, 37, 212, 78, 186, 104, 51, 219, 136, 168]),
          npk: new Uint8Array([47, 121, 50, 161, 205, 248, 245, 150, 118, 246, 148, 119, 160, 149, 176, 236, 207, 8, 99, 247, 222, 241, 215, 217, 208, 222, 12, 60, 178, 219, 47, 122]),
          value: 1n,
        },
        {
          commitment: new Uint8Array([26, 207, 51, 60, 144, 239, 109, 40, 69, 207, 97, 200, 190, 245, 87, 173, 122, 120, 136, 90, 214, 248, 204, 132, 184, 216, 204, 109, 92, 140, 17, 145]),
          npk: new Uint8Array([16, 80, 29, 0, 155, 177, 173, 201, 117, 164, 249, 222, 14, 169, 242, 130, 124, 240, 51, 165, 28, 128, 125, 182, 144, 109, 235, 204, 120, 235, 91, 91]),
          value: 1n,
        },
        ]
      },
    proof: {
      a: {
        x: new Uint8Array([6, 101, 226, 56, 201, 25, 151, 11, 146, 24, 243, 169, 164, 180, 70, 40, 120, 73, 102, 65, 199, 102, 28, 117, 3, 143, 115, 65, 127, 168, 51, 20]),
        y: new Uint8Array([21, 151, 229, 238, 240, 170, 172, 156, 239, 105, 189, 202, 232, 238, 140, 222, 152, 226, 200, 73, 230, 102, 202, 200, 154, 127, 204, 90, 119, 242, 127, 142])
      },
      b: {
        x: [
          new Uint8Array([45, 19, 210, 107, 35, 239, 113, 231, 91, 195, 185, 31, 252, 87, 118, 91, 208, 58, 235, 143, 85, 127, 242, 81, 116, 173, 74, 18, 43, 63, 72, 6]),
          new Uint8Array([41, 75, 166, 4, 199, 174, 89, 212, 241, 180, 120, 131, 188, 110, 186, 18, 70, 215, 175, 48, 245, 207, 0, 211, 197, 188, 217, 134, 233, 116, 112, 64])],
        y: [
          new Uint8Array([34, 137, 148, 115, 64, 84, 231, 126, 39, 40, 171, 173, 45, 246, 206, 48, 26, 122, 215, 18, 122, 9, 53, 17, 94, 7, 240, 92, 63, 65, 65, 131]),
          new Uint8Array([3, 49, 240, 252, 145, 26, 140, 54, 247, 47, 41, 95, 157, 214, 61, 213, 36, 17, 244, 188, 207, 30, 200, 151, 165, 162, 74, 219, 139, 27, 77, 145])
        ]
      },
      c: {
        x: new Uint8Array([38, 59, 60, 91, 220, 247, 80, 136, 187, 209, 192, 56, 241, 50, 20, 126, 181, 15, 21, 84, 115, 214, 179, 226, 108, 83, 228, 201, 201, 157, 50, 115]),
        y: new Uint8Array([30, 100, 90, 115, 99, 205, 28, 162, 102, 159, 91, 79, 169, 179, 30, 48, 23, 10, 21, 255, 172, 23, 2, 117, 157, 228, 249, 165, 160, 6, 171, 96])
      }
    },
  },
  {
    artifacts: artifacts2x2,
    inputs: {
      merkleRoot: new Uint8Array([17, 72, 210, 179, 231, 64, 192, 81, 141, 209, 62, 52, 211, 124, 243, 51, 66, 70, 41, 50, 31, 160, 27, 128, 81, 155, 80, 209, 176, 223, 83, 218]),
      boundParamsHash: new Uint8Array([16, 201, 119, 108, 100, 100, 252, 130, 246, 236, 182, 239, 74, 32, 58, 76, 187, 84, 2, 49, 231, 226, 16, 210, 246, 118, 138, 132, 19, 27, 226, 86]),
      token: new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
      publicKey: [
        new Uint8Array([8, 15, 87, 139, 228, 83, 81, 52, 21, 212, 163, 120, 213, 187, 120, 139, 0, 50, 162, 48, 40, 39, 173, 232, 230, 123, 71, 194, 168, 165, 48, 95]),
        new Uint8Array([43, 127, 233, 65, 240, 162, 142, 56, 60, 252, 67, 171, 66, 93, 84, 45, 218, 104, 190, 69, 115, 231, 215, 78, 52, 63, 35, 97, 201, 177, 222, 155])
      ],
      signature: [
        new Uint8Array([47, 149, 99, 84, 160, 73, 255, 117, 104, 124, 203, 51, 68, 140, 31, 144, 159, 195, 70, 174, 182, 180, 154, 175, 154, 168, 49, 125, 93, 15, 57, 190]),
        new Uint8Array([5, 86, 218, 133, 141, 98, 55, 53, 188, 18, 205, 236, 108, 146, 145, 97, 131, 88, 109, 117, 135, 230, 110, 225, 202, 183, 254, 134, 202, 174, 112, 99]),
        new Uint8Array([4, 234, 36, 16, 171, 171, 38, 108, 12, 231, 194, 59, 112, 107, 40, 50, 49, 42, 160, 46, 208, 26, 79, 110, 20, 208, 239, 253, 116, 10, 22, 198])
      ],
      nullifyingKey: new Uint8Array([44, 197, 240, 8, 124, 16, 217, 202, 77, 233, 194, 88, 189, 84, 197, 229, 212, 222, 54, 24, 205, 241, 28, 125, 170, 160, 249, 186, 209, 165, 124, 179]),
      inputTXOs: [{
        nullifier: new Uint8Array([12, 176, 10, 232, 156, 109, 207, 188, 1, 222, 56, 76, 147, 52, 138, 99, 19, 177, 32, 156, 44, 232, 93, 255, 3, 179, 229, 172, 40, 41, 56, 235]),
        randomIn: new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 176, 150, 218, 175, 134, 175, 63, 135, 129, 35, 105, 176, 246, 180, 218]),
        valueIn: 2n,
        merkleleafPosition: 0,
        pathElements: [
          new Uint8Array([18, 21, 21, 44, 180, 190, 227, 59, 85, 126, 53, 87, 112, 161, 114, 72, 129, 243, 227, 150, 96, 97, 61, 12, 186, 16, 113, 236, 59, 179, 98, 125]),
          new Uint8Array([1, 196, 5, 6, 68, 54, 175, 254, 174, 31, 200, 227, 11, 46, 65, 123, 66, 67, 187, 184, 25, 173, 202, 59, 85, 187, 50, 239, 195, 228, 58, 79]),
          new Uint8Array([8, 136, 211, 118, 82, 209, 13, 23, 129, 219, 84, 183, 10, 248, 123, 66, 162, 145, 110, 135, 17, 143, 80, 114, 24, 249, 164, 42, 88, 232, 94, 210]),
          new Uint8Array([24, 63, 83, 30, 173, 114, 23, 235, 195, 22, 180, 192, 42, 42, 173, 90, 216, 122, 29, 86, 212, 251, 158, 216, 27, 248, 79, 100, 69, 73, 234, 245]),
          new Uint8Array([9, 60, 72, 241, 236, 237, 242, 186, 236, 35, 31, 10, 248, 72, 165, 122, 118, 198, 207, 5, 178, 144, 163, 150, 112, 121, 114, 225, 222, 253, 23, 223]),
          new Uint8Array([20, 55, 187, 70, 89, 148, 224, 69, 51, 87, 193, 122, 103, 107, 159, 219, 165, 84, 226, 21, 121, 94, 188, 23, 234, 80, 18, 119, 13, 251, 119, 199]),
          new Uint8Array([18, 53, 158, 249, 87, 41, 18, 180, 159, 68, 85, 107, 139, 187, 250, 105, 49, 137, 85, 53, 47, 84, 207, 163, 92, 176, 244, 19, 9, 237, 68, 90]),
          new Uint8Array([45, 198, 86, 218, 220, 130, 207, 122, 71, 7, 120, 111, 77, 104, 43, 15, 19, 11, 101, 21, 247, 146, 123, 222, 72, 33, 77, 55, 236, 37, 164, 108]),
          new Uint8Array([37, 0, 189, 252, 21, 146, 121, 21, 131, 172, 239, 208, 80, 188, 67, 154, 135, 241, 216, 232, 105, 126, 183, 115, 232, 230, 155, 68, 151, 62, 111, 220]),
          new Uint8Array([36, 74, 227, 177, 147, 151, 232, 66, 119, 139, 37, 76, 209, 92, 3, 126, 212, 145, 144, 20, 27, 40, 143, 241, 14, 177, 57, 11, 52, 220, 44, 49]),
          new Uint8Array([12, 162, 177, 7, 73, 28, 140, 166, 229, 247, 226, 36, 3, 234, 133, 41, 193, 227, 73, 161, 5, 123, 135, 19, 224, 156, 169, 245, 185, 41, 77, 70]),
          new Uint8Array([24, 89, 60, 117, 169, 228, 42, 242, 123, 94, 91, 86, 185, 156, 76, 106, 93, 126, 125, 110, 54, 47, 0, 200, 227, 246, 154, 238, 188, 229, 35, 19]),
          new Uint8Array([23, 172, 169, 21, 178, 55, 176, 79, 135, 53, 24, 148, 122, 31, 68, 15, 12, 20, 119, 166, 172, 121, 41, 155, 59, 228, 104, 88, 19, 125, 75, 251]),
          new Uint8Array([39, 38, 194, 42, 211, 217, 226, 52, 20, 136, 126, 130, 51, 238, 131, 204, 81, 96, 63, 88, 196, 138, 156, 158, 51, 203, 31, 48, 109, 67, 101, 192]),
          new Uint8Array([8, 197, 189, 15, 133, 206, 242, 248, 195, 193, 65, 42, 43, 105, 238, 148, 60, 105, 37, 236, 247, 151, 152, 187, 43, 132, 225, 183, 109, 38, 135, 31]),
          new Uint8Array([39, 247, 196, 101, 4, 94, 10, 77, 139, 236, 124, 19, 228, 29, 121, 55, 52, 197, 0, 6, 202, 8, 146, 7, 50, 206, 140, 48, 150, 38, 20, 53])
        ],
      },
      {
        nullifier: new Uint8Array([22, 16, 167, 208, 101, 84, 209, 226, 116, 120, 154, 5, 31, 217, 175, 3, 109, 216, 80, 149, 238, 226, 45, 203, 8, 214, 181, 99, 13, 203, 134, 225]),
        randomIn: new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 140, 106, 68, 201, 181, 228, 165, 200, 56, 98, 81, 241, 216, 74, 253, 211]),
        valueIn: 2n,
        merkleleafPosition: 1,
        pathElements: [
          new Uint8Array([15, 77, 128, 112, 185, 64, 40, 81, 60, 149, 45, 66, 252, 156, 141, 81, 248, 160, 202, 142, 18, 124, 94, 162, 203, 248, 41, 135, 202, 131, 13, 208]),
          new Uint8Array([1, 196, 5, 6, 68, 54, 175, 254, 174, 31, 200, 227, 11, 46, 65, 123, 66, 67, 187, 184, 25, 173, 202, 59, 85, 187, 50, 239, 195, 228, 58, 79]),
          new Uint8Array([8, 136, 211, 118, 82, 209, 13, 23, 129, 219, 84, 183, 10, 248, 123, 66, 162, 145, 110, 135, 17, 143, 80, 114, 24, 249, 164, 42, 88, 232, 94, 210]),
          new Uint8Array([24, 63, 83, 30, 173, 114, 23, 235, 195, 22, 180, 192, 42, 42, 173, 90, 216, 122, 29, 86, 212, 251, 158, 216, 27, 248, 79, 100, 69, 73, 234, 245]),
          new Uint8Array([9, 60, 72, 241, 236, 237, 242, 186, 236, 35, 31, 10, 248, 72, 165, 122, 118, 198, 207, 5, 178, 144, 163, 150, 112, 121, 114, 225, 222, 253, 23, 223]),
          new Uint8Array([20, 55, 187, 70, 89, 148, 224, 69, 51, 87, 193, 122, 103, 107, 159, 219, 165, 84, 226, 21, 121, 94, 188, 23, 234, 80, 18, 119, 13, 251, 119, 199]),
          new Uint8Array([18, 53, 158, 249, 87, 41, 18, 180, 159, 68, 85, 107, 139, 187, 250, 105, 49, 137, 85, 53, 47, 84, 207, 163, 92, 176, 244, 19, 9, 237, 68, 90]),
          new Uint8Array([45, 198, 86, 218, 220, 130, 207, 122, 71, 7, 120, 111, 77, 104, 43, 15, 19, 11, 101, 21, 247, 146, 123, 222, 72, 33, 77, 55, 236, 37, 164, 108]),
          new Uint8Array([37, 0, 189, 252, 21, 146, 121, 21, 131, 172, 239, 208, 80, 188, 67, 154, 135, 241, 216, 232, 105, 126, 183, 115, 232, 230, 155, 68, 151, 62, 111, 220]),
          new Uint8Array([36, 74, 227, 177, 147, 151, 232, 66, 119, 139, 37, 76, 209, 92, 3, 126, 212, 145, 144, 20, 27, 40, 143, 241, 14, 177, 57, 11, 52, 220, 44, 49]),
          new Uint8Array([12, 162, 177, 7, 73, 28, 140, 166, 229, 247, 226, 36, 3, 234, 133, 41, 193, 227, 73, 161, 5, 123, 135, 19, 224, 156, 169, 245, 185, 41, 77, 70]),
          new Uint8Array([24, 89, 60, 117, 169, 228, 42, 242, 123, 94, 91, 86, 185, 156, 76, 106, 93, 126, 125, 110, 54, 47, 0, 200, 227, 246, 154, 238, 188, 229, 35, 19]),
          new Uint8Array([23, 172, 169, 21, 178, 55, 176, 79, 135, 53, 24, 148, 122, 31, 68, 15, 12, 20, 119, 166, 172, 121, 41, 155, 59, 228, 104, 88, 19, 125, 75, 251]),
          new Uint8Array([39, 38, 194, 42, 211, 217, 226, 52, 20, 136, 126, 130, 51, 238, 131, 204, 81, 96, 63, 88, 196, 138, 156, 158, 51, 203, 31, 48, 109, 67, 101, 192]),
          new Uint8Array([8, 197, 189, 15, 133, 206, 242, 248, 195, 193, 65, 42, 43, 105, 238, 148, 60, 105, 37, 236, 247, 151, 152, 187, 43, 132, 225, 183, 109, 38, 135, 31]),
          new Uint8Array([39, 247, 196, 101, 4, 94, 10, 77, 139, 236, 124, 19, 228, 29, 121, 55, 52, 197, 0, 6, 202, 8, 146, 7, 50, 206, 140, 48, 150, 38, 20, 53]),
        ]
      }
      ],
      outputTXOs: [
        {
          commitment: new Uint8Array([23, 46, 40, 129, 254, 108, 10, 110, 251, 223, 60, 182, 154, 27, 72, 19, 247, 148, 113, 207, 157, 177, 18, 222, 234, 8, 79, 26, 78, 249, 75, 213]),
          npk: new Uint8Array([26, 53, 135, 166, 144, 31, 239, 67, 124, 130, 87, 144, 127, 244, 105, 248, 16, 94, 83, 43, 120, 68, 5, 126, 241, 119, 172, 74, 56, 224, 163, 40]),
          value: 2n
        }, {
          commitment: new Uint8Array([23, 56, 125, 221, 248, 9, 25, 237, 20, 69, 109, 113, 247, 45, 154, 105, 187, 113, 45, 98, 181, 177, 64, 86, 12, 44, 160, 155, 132, 91, 176, 19]),
          npk: new Uint8Array([41, 4, 148, 77, 144, 66, 178, 234, 189, 209, 160, 132, 133, 36, 180, 165, 183, 197, 118, 169, 79, 81, 9, 202, 202, 54, 66, 45, 75, 6, 89, 171]),
          value: 2n
        }
      ]
    },
    proof: {
      a: {
        x: new Uint8Array([2, 53, 22, 3, 87, 232, 8, 153, 215, 76, 35, 36, 15, 130, 27, 29, 202, 63, 220, 159, 164, 22, 117, 82, 177, 128, 167, 74, 203, 2, 33, 53]),
        y: new Uint8Array([8, 6, 14, 204, 59, 58, 139, 100, 219, 226, 89, 63, 127, 90, 135, 232, 22, 125, 111, 67, 182, 56, 110, 5, 190, 236, 152, 158, 135, 227, 165, 253])
      },
      b: {
        x: [
          new Uint8Array([35, 222, 132, 190, 111, 36, 45, 0, 204, 45, 55, 216, 117, 128, 36, 82, 14, 252, 116, 125, 131, 247, 64, 255, 85, 243, 67, 250, 36, 57, 25, 134]),
          new Uint8Array([25, 141, 109, 161, 191, 1, 230, 181, 120, 28, 64, 233, 61, 14, 120, 33, 203, 50, 1, 227, 180, 37, 0, 198, 26, 10, 74, 43, 63, 95, 36, 91])
        ],
        y: [
          new Uint8Array([37, 124, 198, 52, 89, 247, 60, 154, 169, 91, 40, 193, 139, 42, 66, 140, 75, 214, 157, 66, 35, 128, 65, 92, 38, 168, 132, 2, 118, 117, 213, 186]),
          new Uint8Array([9, 178, 111, 156, 103, 238, 120, 87, 149, 249, 154, 145, 120, 241, 235, 141, 51, 29, 114, 128, 213, 45, 63, 50, 233, 158, 132, 154, 52, 63, 166, 93])
        ]
      },
      c: {
        x: new Uint8Array([15, 115, 242, 188, 167, 32, 252, 255, 127, 7, 25, 76, 193, 247, 112, 139, 125, 90, 230, 172, 59, 190, 125, 188, 188, 173, 68, 246, 109, 1, 78, 219]),
        y: new Uint8Array([19, 0, 45, 3, 191, 97, 2, 206, 10, 40, 80, 113, 127, 185, 178, 62, 6, 8, 106, 61, 159, 169, 234, 203, 150, 42, 209, 176, 137, 138, 42, 93])
      }
    }
  }
]